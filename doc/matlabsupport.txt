*matlabsupport.txt*             Matlab Support                     Mar 25 2014

Matlab Support                                 *matlab-support* *matlabsupport*

                            Plug-in version 0.8rc2
                        for Vim version 7.0 and above
                 Wolfgang Mehner <wolfgang-mehner at web.de>

MATLAB-IDE for Vim/gVim. It is written to considerably speed up writing code
in a consistent style. This is done by inserting complete statements, idioms
and comments. These code fragments are provided in an extendible template
library. This plug-in also supports the use of the MATLAB code checker "mlint"
and provides quick access to the online documentation of the Matlab functions.
See the chapter |matlabsupport-introduction| for a quick overview and a short
guide to this documentation.

The MathWorks, Inc and MATLAB are registered trademarks of The MathWorks, Inc.

==============================================================================
0.  TABLE OF CONTENTS                         *matlabsupport-support-contents*
==============================================================================

 1.    Introduction                     |matlabsupport-introduction|
 2.    Usage                            |matlabsupport-usage|
 2.1    Comments                        |matlabsupport-usage-comments|
 2.1.1   End-of-Line Comments           |matlabsupport-usage-comments-eol|
 2.1.2   Comment Lines                  |matlabsupport-usage-comments-lines|
 2.1.3   Automated Comments             |matlabsupport-usage-comments-auto|
 2.2    Snippets                        |matlabsupport-usage-snippets|
 2.3    Use mlint                       |matlabsupport-usage-mlint|
 2.3.1   Using QuickFix                 |matlabsupport-usage-mlint-qf|
 2.4    Help                            |matlabsupport-usage-help|
 3.    Templates                        |matlabsupport-templates|
 3.1    Introduction                    |matlabsupport-templates-introduction|
 3.2    Jump Tags                       |matlabsupport-templates-jump-tags|
 3.3    Split Tags                      |matlabsupport-templates-split-tags|
 3.4    Auxiliary Functions             |matlabsupport-templates-aux|
 4.    Configuration                    |matlabsupport-configuration|
 4.1    Menus                           |matlabsupport-config-menus|
 4.2    Maps                            |matlabsupport-config-maps|
 4.3    Comments                        |matlabsupport-config-comments|
 4.4    Snippets                        |matlabsupport-config-snippets|
 4.5    Mlint                           |matlabsupport-config-mlint|
 4.6    Template Library                |matlabsupport-config-template-lib|
 4.7    Template Customization          |matlabsupport-config-template-cstm|
 4.8    Browser                         |matlabsupport-config-browser|
 5.    System-wide Installation         |matlabsupport-system-wide|

 A.    Troubleshooting - Known Issues   |matlabsupport-troubleshooting|
 B.    Release Notes - Change Log       |matlabsupport-release-notes|
 C.    Credits                          |matlabsupport-credits|

==============================================================================
1.  INTRODUCTION                                  *matlabsupport-introduction*
==============================================================================

After the first Matlab file (*.m) has been opened, the menu "Matlab" appears
in the menu bar. It holds entries for all the templates (such as
"Statements->for" or "Idioms->function"), as well as some other functionality.
The letters on the right name maps, which can also be used to access all the
capabilities.
The menus are also created if a GUI is not running. They can be used via >
  :emenu Matlab.
(Use the arrow keys for navigation, <Enter> to select an entry and <TAB> for
auto completion.)

The features of the plug-in are:
- Turn code lines into comments and vice versa.
    |matlabsupport-usage-comments-lines|
- Automatically add comments for functions and its parameters.
    |matlabsupport-usage-comments-auto|
- Open the online documentation for a given function.
    |matlabsupport-usage-help|
- Invoke the code checker "mlint". |matlabsupport-usage-mlint|
- Manage code snippets. |matlabsupport-usage-snippets|
- An extendible template library. |matlabsupport-templates|

The usage of most features is described in the chapter |matlabsupport-usage|.
The chapter |matlabsupport-templates| gives a short introduction to the
template system. The code checker "mlint" and some other features require some
configuration, which is documented in the chapter |matlabsupport-configuration|.
How to do a system-wide installation is outlined in |matlabsupport-system-wide|.

The template system comes with its own documentation, which mainly aims at the
advanced user (see |templatesupport.txt|).

==============================================================================
2.  USAGE                                                *matlabsupport-usage*
==============================================================================

Features are accessible via menu entries and maps. Most maps are preceded by a
mapleader. The leader is backslash, if the standard configuration is used.

------------------------------------------------------------------------------
2.1  COMMENTS                                   *matlabsupport-usage-comments*
------------------------------------------------------------------------------

Besides the templates, there is some other functionality provided in the menu
"Comments".

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  add end-of-line comments   Comments.end-of-line comment   <LocalLeader>cl
  adjust end-of-line com.    Comments.adjust end-of-line c. <LocalLeader>cj
  set end-of-line column     Comments.set end-of-line col.  <LocalLeader>cs

  code to comment            Comments.code -> comment       <LocalLeader>cc
  comment to code            Comments.comment -> code       <LocalLeader>co
  toggle comments            Comments.toggle code <-> com.  <LocalLeader>ct

  automatic function         Comments.func. desc. (auto)    <LocalLeader>ca
    description 
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------

2.1.1  End-of-Line Comments                 *matlabsupport-usage-comments-eol*

End-of-line comments can be added using the map \cl or the menu entry
"Comments -> end-of-line comment". They will all start in the same column. The
number of this column is set to a default value at first (see
|g:Matlab_LineEndCommentColumn|), but can be set for each buffer individually
using "Comments -> set end-of-line col.". This causes the column currently
under the cursor to be used in the future.
Existing comments can be adjusted to this column using \cj or the menu entry
"Comments -> adjust end-of-line com.".

In normal and insert mode, the current line will be changed. In visual mode
the entire selected range is edited. The maps can also be used with a line
count: >
  3\cl
to add end-of-line comments to three lines at once.

Example:

If the mouse cursor is placed on the first line: >

  s.name = 'file.txt';
  s.type = 'csv';
  s.cols = 4;
<
and the map 3\cl is used, the result will be: >

  s.name = 'file.txt';                          % <CURSOR IS PLACED HERE>
  s.type = 'csv';                               %
  s.cols = 4;                                   %
<
Now each field of the struct can be documented.

------------------------------------------------------------------------------

2.1.2  Comment Lines                      *matlabsupport-usage-comments-lines*

Lines of code can be changed into comments and vice versa with just a few
keystrokes.  In normal and insert mode, the comment, uncomment and toggle
functions will change the current line. In visual mode the entire selected
range is affected.
The maps can also be used together with a count, such as: >
  4\cc
to change the current line and the three lines below it into comments.

Example:

If the following lines are select: >

  %file  = 'settings1.txt';
  %debug = true;
  file  = 'settings2.txt';
  debug = false;
<
and the map \ct (toggle) is used, the result will be: >

  file  = 'settings1.txt';
  debug = true;
  %file  = 'settings2.txt';
  %debug = false;
<
------------------------------------------------------------------------------

2.1.3  Automated Comments                  *matlabsupport-usage-comments-auto*

A skeleton for a comment can be created automatically for a given function.
This works on the current line or a selected range of lines. After choosing
the function definition line, use "Comments -> function description (auto)".
The results will be slightly different, depending on whether the function is
the primary function of the file or another function.
The appearance (and placement) can be change in the template library.

Example:

Consider the function definition:
>
  function n = norm ( vector, p )

  n = ...
<
After placing the cursor on the function definition line, invoke the auto
comment. The result will look like this:
>
  function n = norm ( vector, p )
  %NORM <CURSOR IS PLACED HERE>.
  %   {+DETAILS+}
  %
  %   Parameters: vector - {+DESCRIPTION+}. ({+TYPE+})
  %               p      - {+DESCRIPTION+}. ({+TYPE+})
  %   Returns:    n      - {+DESCRIPTION+}. ({+TYPE+})

  n = ...
<
After typing a brief description, use <CTRL-J> to jump to the various tags: >
  {+TAG+}
and fill in the information (see Sec. |matlabsupport-templates-jump-tags|).

------------------------------------------------------------------------------
2.2  SNIPPETS                                   *matlabsupport-usage-snippets*
------------------------------------------------------------------------------

Useful code snippets can be kept in a central place. This way, they can
quickly be inserted into the code, using "Snippets -> insert code snippet".
New snippets can be created from existing lines of code be selecting them in
visual mode and saving them using "Snippets -> create code snippet".

Code snippets are kept in a directory which can be changed using the setting
|g:Matlab_SnippetDir|.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  insert code snippet        Snippets.insert code snippet   <LocalLeader>ni
  create code snippet        Snippets.create code snippet   <LocalLeader>nc
  view code snippet          Snippets.view code snippet     <LocalLeader>nv
  edit code snippet          Snippets.edit code snippet     <LocalLeader>ne
 ----------------------------------------------------------------------------

------------------------------------------------------------------------------
2.3  USE MLINT                                     *matlabsupport-usage-mlint*
------------------------------------------------------------------------------

The plug-in assists in the usage of the Matlab code checker 'mlint'.
(See Section |matlabsupport-config-mlint| for the configuration.)

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  check the code             Run.check code                 <LocalLeader>rk
  ignore a warning           Run.ignore warning             <LocalLeader>ri
 ----------------------------------------------------------------------------

After invoking the code checker, "No warnings." will be prompted or the
|quickfix| window will open. You can quickly go through all the warning by
using the commands |:cnext| and |:cprevious|. The fastest way of using them
are maps. (see |matlabsupport-usage-mlint-qf|)
After jumping to a warning you can automatically insert a special comment to
ignore it.

Example:

The code checker will complain about the unused parameter:
>
  function s = sum ( a, b, c )
    s = a + b;
  end
<
Ignoring it will automatically insert the comment:
>
  function s = sum ( a, b, c ) %#ok<INUSD>
    s = a + b;
  end
<
------------------------------------------------------------------------------

2.3.1  Using QuickFix                           *matlabsupport-usage-mlint-qf*

Vim's QuickFix facility is described here: |quickfix.txt|. It offers a
convenient way to go through all the errors which a program like a compiler or
code checker has found in the code.

It is controlled by the commands:
- |:copen| and |:cclose|    : open or close the quickfix window
- |:cnext| and |:cprevious| : jump to the next previous error

The fastest way of using them is to put maps like this into your .vimrc file:
>
  map  <silent>  <F5>  :copen<CR>
  map  <silent>  <F6>  :cclose<CR>
  map  <silent>  <F7>  :cprevious<CR>
  map  <silent>  <F8>  :cnext<CR>
<
You can now use F5 and F6 to open and close the quickfix window and F7 and F8
to jump to the errors.

------------------------------------------------------------------------------
2.4  HELP                                           *matlabsupport-usage-help*
------------------------------------------------------------------------------

The menu "Help" speeds up the access to various resources, such as the online
documentation of Matlab functions or an English dictionary.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  open English dictionary    Help.English                   <LocalLeader>he
  open reference for a       Help.Matlab function           <LocalLeader>hf
    function
  open plug-in help          Help.help (Matlab support)     <LocalLeader>hs
 ----------------------------------------------------------------------------

The online reference can by opened very conveniently for Matlab functions.
Simply place the cursor on the name of a function in your source code, and use
the menu entry or the map to open the online reference for that function.
(See Section |matlabsupport-config-browser| for the configuration.)

Example:

Place the cursor on "sin" and invoke the map: >
  a = sin ( r * pi );
The following URL will be opened in your browser: >
  http://www.mathworks.de/help/techdoc/ref/sin.html
<
==============================================================================
3.  TEMPLATES                                        *matlabsupport-templates*
==============================================================================

Most of the menu entries insert templates into the current text. Most
templates come with their own map, for fast and convenient access. All maps
start with a mapleader, which can be set to a different value for use within
Matlab Support (see |g:Matlab_MapLeader|).

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  -various templates-        (automatically generated)      <LocalLeader>...
 ----------------------------------------------------------------------------

The following sections provide a short overview of the template system. See
the documentation of the template system for a more in-depth discussion:
|templatesupport.txt|

------------------------------------------------------------------------------
3.1  INTRODUCTION                       *matlabsupport-templates-introduction*
------------------------------------------------------------------------------

This plug-in makes heavy use of an extendible template library. A template
library can assist in speeding up the writing of code, while at the same time
ensuring a consistent style. The templates are written in an easy to use
markup language, which enables the user to customize templates without much
hassle.

Templates are short pieces of text which can be included into source code or
text of any other kind. But they are not just plain text, they can be extended
with macros and tags to provide further convenience. Macros can be
automatically replaced with the date or the filename, or they can be replaced
with input from the user, for example the name of a new function.

While inserting a template, the user will often be ask to enter some
replacement text on the command line, for example the name of a function. The
replacement text will then be used in the template while it is inserted.
Hitting <ESC> or entering an empty text will abort template insertion.

------------------------------------------------------------------------------
3.2  JUMP TAGS                             *matlabsupport-templates-jump-tags*
------------------------------------------------------------------------------

Templates can include special tags, which mark positions where text needs to
be added.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  jump to next tag           -                              <CTRL-J>
 ----------------------------------------------------------------------------

Use the <CTRL-J> to jump to the next tag. The maps works in normal and insert
mode.

------------------------------------------------------------------------------
3.3  SPLIT TAGS                           *matlabsupport-templates-split-tags*
------------------------------------------------------------------------------

Some templates include so-called split tags and therefore can use to surround
some lines of code.

Example:

Consider the lines:
>
  a = 1;
  b = 2;
<
The template "Statements.if, else" contains a split tag between "if" and
"else". After selecting the two lines and inserting the template, the result
looks like this:
>
  if <CURSOR IS PLACED HERE>
    a = 1;
    b = 2;
  else
    {+ELSE_PART+}
  end
<
After adding the condition, use <CTRL-J> to jump to the else-part.

------------------------------------------------------------------------------
3.4  AUXILIARY FUNCTIONS                         *matlabsupport-templates-aux*
------------------------------------------------------------------------------

The template system comes with several auxiliary functions.

  Feature                    Menu Entry                     Map
 ----------------------------------------------------------------------------
  edit the local template    Snippets.edit local templates  <LocalLeader>ntl
    library
  edit the global template   Snippets.edit global templates <LocalLeader>ntg
    library (*1)
  reread the templates       Snippets.reread templates      <LocalLeader>ntr
  choose a style             Snippets.choose style          <LocalLeader>nts
 ----------------------------------------------------------------------------

"Snippets -> edit templates" will open a file browser in the directory
containing your template library. This feature is merely a fast way to jump to
the files.  After the templates have been edited, they need to be read again.

See the documentation of the template system for a more in-depth discussion:
|templatesupport.txt|

Note *1: system-wide installation only

==============================================================================
4.  CONFIGURATION                                *matlabsupport-configuration*
==============================================================================

The basic configuration is done via a number of global variables, which can be
set in the .vimrc file.

  Variable                  Default       Description
 ----------------------------------------------------------------------------
  |g:Matlab_LoadMenus|        'auto'        when to load the menus ('startup',
                                            'auto' or 'manual')
  |g:Matlab_RootMenu|         '&Matlab'     name and shortcut of the root menu
  |g:Matlab_MapLeader|        ''            the |maplocalleader| used for maps
  |g:Matlab_LineEndCommentColumn|           standard column used for end-of-
                            49              line comments
  |g:Matlab_SnippetDir|       (see below)   directory with code snippers
  |g:Matlab_SnippetBrowser|   'gui'         browser to select code snippets
  |g:Matlab_MlintExecutable|  'mlint'       the mlint executable
  |g:Matlab_LclTemplateFile|  (see below)   the local top-level template file
  |g:Matlab_GlbTemplateFile|  (see below)   the global top-level template file
 ----------------------------------------------------------------------------

Further customization is carried out in the template library:
- |matlabsupport-config-template-cstm|
- |matlabsupport-config-browser|

------------------------------------------------------------------------------
4.1  MENUS                                        *matlabsupport-config-menus*
------------------------------------------------------------------------------
                                                          *g:Matlab_LoadMenus*
The creation of the menus is controlled by g:Matlab_LoadMenus. The default
setting: >
  let g:Matlab_LoadMenus = 'auto'
causes the templates to be loaded and the menus to be created when the first
Matlab file is opened.
The menus appear right away after starting Vim with the setting: >
  let g:Matlab_LoadMenus = 'startup'
This has the disadvantage that the templates have to be loaded during the
startup of Vim, which might cause a noticeable slowdown on older systems.
The automatic creation of the menus is prevented by: >
  let g:Matlab_LoadMenus = 'manual'
Now the menus can only be loaded by using the tool menu entry "Tools.Load
Matlab Support".

                                                           *g:Matlab_RootMenu*
The name and shortcut of the root menu is set via g:Matlab_RootMenu. The
character prefixed by '&' will be the shortcut.

Example: >
  let g:Matlab_RootMenu = 'Mat&lab'
Sets the shortcut to 'l'.

------------------------------------------------------------------------------
4.2  MAPS                                          *matlabsupport-config-maps*
------------------------------------------------------------------------------
                                                          *g:Matlab_MapLeader*
All the maps the plug-in creates use |maplocalleader|. It can be changed by
setting the variable g:Matlab_MapLeader. If it contains the empty string,
Vim's default (backslash) is used.

Example: >
  let g:Matlab_MapLeader = '#'
Sets the mapleader to '#'.

                                                       *Matlab_SetMapLeader()*
                                                     *Matlab_ResetMapLeader()*
The configured mapleader can also be used in the ftplugin, by calling the
functions Matlab_SetMapLeader() and Matlab_ResetMapLeader(). The maps created
between the two calls will use |g:Matlab_MapLeader| as the |<LocalLeader>|:
>
  call Matlab_SetMapLeader ()

  map  <buffer>  <LocalLeader>eg  :echo "Example Map :)"<CR>

  call Matlab_ResetMapLeader ()
<
------------------------------------------------------------------------------
4.3  COMMENTS                                  *matlabsupport-config-comments*
------------------------------------------------------------------------------
                                               *g:Matlab_LineEndCommentColumn*
The standard column used for end-of-line comments is configured using
g:Matlab_LineEndCommentColumn. The column can then be set individually for
each buffer, using the menu entry "Comments.set end-of-line com. col.".

Example: >
  let g:Matlab_LineEndCommentColumn = 59
<
------------------------------------------------------------------------------
4.4  SNIPPETS                                  *matlabsupport-config-snippets*
------------------------------------------------------------------------------
                                                         *g:Matlab_SnippetDir*
The variable g:Matlab_SnippetDir sets the location of the code snippet
directory. The default value depends on the type of installation and the
operating system.

(Path separators are always written as slashes '/', even for Windows.)


For a local installation, the default will be (UNIX/Linux): >
  s:Matlab_SnippetDir = $HOME.'/.vim/matlab-support/codesnippets/'
or (Windows): >
  s:Matlab_SnippetDir = $HOME.'/vimfiles/matlab-support/codesnippets'
<

For a sytem-wide installation, the default will be: >
  s:Matlab_SnippetDir = $VIM.'/vimfiles/matlab-support/codesnippets'
<

Example:

To set a different code snippet directory, add this line to your vimrc: >
  let g:Matlab_SnippetDir = $HOME.'/myvim/matlab/codesnippets/'
<
                                                     *g:Matlab_SnippetBrowser*
Code snippets can either be selected in a file browser, by setting: >
  let g:Matlab_SnippetBrowser = 'gui'
or on the command line by setting: >
  let g:Matlab_SnippetBrowser = 'cmd-line'
<
------------------------------------------------------------------------------
4.5  MLINT                                        *matlabsupport-config-mlint*
------------------------------------------------------------------------------
                                                    *g:Matlab_MlintExecutable*
If mlint can be found on the system path, no further configuration is
necessary. Otherwise the executable must be set via g:Matlab_MlintExecutable.

Example: >
  let g:Matlab_MlintExecutable = '/opt/matlab/bin/glnxa64/mlint'
This is where mlint can be found on the authors system.

------------------------------------------------------------------------------
4.6  TEMPLATE LIBRARY                      *matlabsupport-config-template-lib*
------------------------------------------------------------------------------
                                                    *g:Matlab_LclTemplateFile*
                                                    *g:Matlab_GlbTemplateFile*
The variables g:Matlab_LclTemplateFile and g:Matlab_GlbTemplateFile set the
locations and names of the local and global template files, respectively.
The default for the local and global template files depend on the type of the
installation.

(Path separators are always written as slashes '/', even for Windows.)


Local installation:

If the plug-in matlab-support.vim can be found here: >
  <VIMDIR>/plugin/matlab-support.vim
The default for the local template file is: >
  g:Matlab_LclTemplateFile
    = '<VIMDIR>/matlab-support/templates/Templates'
There is no global template file.


System-wide installation:

The default for the global template file is: >
  g:Matlab_GlbTemplateFile
    = $VIM.'/vimfiles/matlab-support/templates/Templates'
The default for the local template file is (UNIX/Linux): >
  s:Matlab_LclTemplateFile
    = $HOME.'/.vim/matlab-support/templates/Templates'
or (Windows): >
  s:Matlab_LclTemplateFile
    = $HOME.'/vimfiles/matlab-support/templates/Templates'
<

Example:

To set a different local template file, add this line to your vimrc: >
  let g:Matlab_LclTemplateFile = $HOME.'/myvim/matlab/templates/my.templates'
<
------------------------------------------------------------------------------
4.7  TEMPLATE CUSTOMIZATION               *matlabsupport-config-template-cstm*
------------------------------------------------------------------------------

The template library is customized via your local template file. Use the menu
entry "Snippets -> edit local templates" to get there.

You should fill in your name and other information here:
>
  SetMacro( 'AUTHOR',    'Your Name' )
  SetMacro( 'AUTHORREF', 'YN' )
  SetMacro( 'EMAIL',     'your-email@i-use-vim.org' )
  ...
<
The format of the date and time which is inserted in the templates can be
configured as well (using the same format as the C function 'strftime'):
>
  SetFormat( 'DATE', '%x' )
  SetFormat( 'TIME', '%H:%M' )
  SetFormat( 'YEAR', '%Y' )
<
This sets the format for the date to the preferred representation for your
current locale, the time will be inserted as 10:24 and the year will be
represented using four digits.

Afterwards, use the menu entry "Snippets -> reread templates" to apply the
changes.

------------------------------------------------------------------------------
4.8  BROWSER                                    *matlabsupport-config-browser*
------------------------------------------------------------------------------

Opening the online reference for various items is a feature of the template
library. The browser has to be configured there, in your local template file
(see |matlabsupport-config-template-lib|), by setting the macro *|HELP_BROWSER|*
(see below).

The help facility will open the reference with a system call like this: >
  |HELP_BROWSER| |URL|
where *|URL|* is replaced with an appropriate URL and *|HELP_BROWSER|* is
replaced with a string set by the user.

Example:

By adding this line to your local template file: >
  SetMacro( 'HELP_BROWSER', 'firefox -new-tab' )
The online reference will be opened like this: >
  firefox -new-tab http://wiki.awesomematlabwiki.de/wiki/sin
<
Under Windows, the browser for opening the online documentation has to be
configured. To set the executable, the template library has to be modified.
In case of a local installation (the default), choose:
  Matlab -> Snippets -> edit local templates
and for a system-wide installation:
  Matlab -> Snippets -> edit global templates
Open the main template file 'Templates' and uncomment the line >
 §SetMacro( 'HELP_BROWSER', '"C:\Program Files\Mozilla Firefox\firefox.exe"' )
by removing the leading '§' >
 SetMacro( 'HELP_BROWSER', '"C:\Program Files\Mozilla Firefox\firefox.exe"' )
Then set the right executable. Mind the double quotes which escape the name of
the executable.
Finally, reread the template library using:
  Matlab -> Snippets -> reread templates

==============================================================================
5.  SYSTEM-WIDE INSTALLATION                       *matlabsupport-system-wide*
==============================================================================

A system-wide installation (one installation for all users) of the plug-in can
be done. This will mean however, that a user can not edit the template
library, for example to set his own name. So in case of a system-wide
installation, every user can have an own set of templates (called local
templates), which are localed in each users' home directory.
Note: As you might have guessed, this behavior is much more inspired by Linux
than Windows.

A system-wide installation is done as follows.

------------------------------------------------------------------------------

As *** SUPERUSER *** :

(1) Find the Vim installation directory.
The Vim ex command ':echo $VIM' gives '/usr/local/share/vim' or something
similar. Beyond this directory you will find the Vim installation, e.g. in
'/usr/local/share/vim/vim73' if Vim version 7.3 has been installed (Windows:
'C:\Program Files\Vim').

(2) Create a new subdirectory 'vimfiles', e.g. '/usr/local/share/vim/vimfiles'
(Windows: 'C:\Program Files\Vim\vimfiles').

(3) Install Matlab Support
Copy the archive matlab-support.zip to this new directory and unpack it:
>
  unzip matlab-support.zip
<
(4) Generate the help tags:
>
  :helptags $VIM/vimfiles/doc
<
SPECIAL CASES. Some Linux distributions use non-standard names for Vim
directories. SUSE has a directory '/usr/share/vim/site' to put plug-ins in.
These directories will not be found automatically. After installing the
plug-in below '/usr/share/vim/site' the use of the templates will be enabled
by the following line in '~/.vimrc' (see |matlabsupport-config-template-lib|):
>
  let g:Matlab_GlbTemplateFile =
    \ '/usr/share/vim/site/matlab-support/templates/Templates'
<
------------------------------------------------------------------------------

As *** USER *** :

This plug-in will try to create your private template directory, taking the
path from the setting g:Matlab_LclTemplateFile. The default is: >
  ~/.vim/matlab-support/templates
The directory will contain a minimal personal main template file. You should
set some macros in this file with your personal information in order to obtain
personalized comments:
>
  SetMacro( 'AUTHOR',    'Your Name' )
  SetMacro( 'AUTHORREF', 'YN' )
  SetMacro( 'EMAIL',     'your-email@i-use-vim.org' )
  SetMacro( 'COPYRIGHT', 'Copyright (c) |YEAR|, |AUTHOR|' )
<
You can also have local templates which override the global ones. To edit the
file, use the menu entry "Matlab -> Snippets -> edit local templates".

==============================================================================
A.  TROUBLESHOOTING - KNOWN ISSUES             *matlabsupport-troubleshooting*
==============================================================================

* I do not see any new main menu item.
  - The menu is only created upon opening the first Matlab file (*.m).
    This behavior can be changed:
      :help matlabsupport-config-menus
  - Was the archive extracted into the right directory?
    See the section INSTALLATION in matlab-support/README.md.
  - Loading of plug-in files must be enabled. If not use
      :filetype plugin on
    This is the minimal content of the file '$HOME/.vimrc'. Create one if
    there is none, or better use customization.vimrc.
    See the section FILES in matlab-support/README.md.

* How can I see what was loaded?
  - Use ':scriptnames' from the Vim command line.

* mlint is not running.
  - Is "mlint" executable from the command line?
  - Is the $PATH variable set correctly?
  - Are the settings correct? See:
      :help matlabsupport-config-mlint

==============================================================================
B.  RELEASE NOTES - CHANGE LOG                   *matlabsupport-release-notes*
==============================================================================

See files 'matlab-support/README.md' and 'matlab-support/doc/ChangeLog'.

==============================================================================
C.  CREDITS                                            *matlabsupport-credits*
==============================================================================

Fritz Mehner (vim.org user name: mehner) for a number of things:
- his plug-ins (bash-support, c-support, perl-support, ...) provided the
  inspiration and template for this plug-in and the utilized template system
- parts of the documentation and other material are taken from his plug-ins as
  well

Sameer Sheorey (sameer0s) and Fabrice Guy (Fabrice):
- for demonstrating how to use mlint with Vim

==============================================================================
vim:tw=78:noet:ts=2:ft=help:norl:expandtab:
