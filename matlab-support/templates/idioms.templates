§ =============================================================
§  Idioms
§ =============================================================

MenuShortcut( 'Idioms.Exceptions', 'x' )

§ -------------------------------------------------------------
§  Exception Object
§ -------------------------------------------------------------

== LIST: exception_properties == hash ==
	'cause{}'      : 'cause{<CURSOR>}',
	'identifier'   : 'identifier<CURSOR>',
	'message'      : 'message<CURSOR>',
	'stack'        : 'stack<CURSOR>',
	'stack().file' : 'stack(<CURSOR>).file',
	'stack().line' : 'stack(<CURSOR>).line',
	'stack().name' : 'stack(<CURSOR>).name',
== ENDLIST ==

== LIST: exception_methods == hash ==
    'MException'    : '',
    'addCause'      : ', {+CAUSE_EXCEPTION+}',
    'getReport'     : '',
    'rethrow'       : '',
    'throw'         : '',
    'throwAsCaller' : '',
== ENDLIST ==

== Idioms.Exceptions.property == insert, expandmenu, map:xp, sc:p ==
|Prompt( 'EXCEPTION_OBJ', '' )|
|PickList( 'property', 'exception_properties' )|
|EXCEPTION_OBJ|.|VALUE|
== Idioms.Exceptions.method == insert, expandmenu, map:xm, sc:m ==
|Prompt( 'EXCEPTION_OBJ', '' )|
|PickList( 'method', 'exception_methods' )|
|KEY| ( |EXCEPTION_OBJ|<CURSOR>|VALUE| )
== Idioms.Exceptions.last exception == insert, map:xl, sc:l ==
MException.last<CURSOR>
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Try-Catch Block
§ -------------------------------------------------------------

== Idioms.Exceptions.try == below, map:xt, sc:t ==
|Prompt( 'EXCEPTION_OBJ', '' )|
try
    <CURSOR><SPLIT>
catch |EXCEPTION_OBJ|
    {+EXC_HANDLING+}
end
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Try-Catch Block
§ -------------------------------------------------------------

== SEP: Idioms.sep_functions ==

== Idioms.primary function == start, map:ip, sc:p ==
function <CURSOR> = |BASENAME| ( {+ARGUMENTS+} )
    <SPLIT>{-FUNCTION_BODY-}
end

== Idioms.function == below, map:if, sc:f ==
function <CURSOR> = |?FUNCTION_NAME| ( {+ARGUMENTS+} )
    <SPLIT>{-FUNCTION_BODY-}
end

== ENDTEMPLATE ==

SetPath( 'matlab_path', './' )

== Idioms.add to MATLAB path == below, map:im, sc:m ==
path ( path, '<CURSOR>' );
== ENDTEMPLATE ==

§--------------------------------------------------------------
§ vim:et:sw=4:ts=4:
